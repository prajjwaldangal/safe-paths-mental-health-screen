{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/prajjwaldangal/summer2020/safePaths/safe-paths-mental-health-screen/screens/TabTwoScreen.tsx\";\nimport * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { Text, View } from \"../components/Themed\";\nvar screen = Dimensions.get('window');\n\nvar formatNumber = function formatNumber(number) {\n  return (\"0\" + number).slice(-2);\n};\n\nvar getRemaining = function getRemaining(time) {\n  var mins = Math.floor(time / 60);\n  var secs = time - mins * 60;\n  return {\n    mins: formatNumber(mins),\n    secs: formatNumber(secs)\n  };\n};\n\nexport default function App() {\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      remainingSecs = _useState2[0],\n      setRemainingSecs = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isActive = _useState4[0],\n      setIsActive = _useState4[1];\n\n  var _getRemaining = getRemaining(remainingSecs),\n      mins = _getRemaining.mins,\n      secs = _getRemaining.secs;\n\n  var toggle = function toggle() {\n    console.log(remainingSecs);\n    setIsActive(!isActive);\n  };\n\n  var reset = function reset() {\n    setRemainingSecs(0);\n    setIsActive(false);\n  };\n\n  useEffect(function () {\n    var interval = null;\n\n    if (isActive) {\n      interval = setInterval(function () {\n        setRemainingSecs(function (remainingSecs) {\n          return remainingSecs + 1;\n        });\n      }, 1000);\n    } else if (!isActive && remainingSecs !== 0) {\n      clearInterval(interval);\n    }\n\n    return function () {\n      return clearInterval(interval);\n    };\n  }, [isActive, remainingSecs]);\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, React.createElement(StatusBar, {\n    barStyle: \"light-content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    style: styles.timerText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, mins + \":\" + secs), React.createElement(TouchableOpacity, {\n    onPress: toggle,\n    style: styles.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, isActive ? 'Pause' : 'Start')), React.createElement(TouchableOpacity, {\n    onPress: reset,\n    style: [styles.button, styles.buttonReset],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: [styles.buttonText, styles.buttonTextReset],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, \"Reset\")));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#07121B',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  buttonTimer: {\n    flex: 1,\n    flexDirection: 'row'\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold'\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%'\n  },\n  buttonText: {\n    fontSize: 45,\n    color: '#B9AAFF'\n  },\n  timerText: {\n    color: '#fff',\n    fontSize: 90,\n    marginBottom: 20\n  },\n  buttonReset: {\n    marginTop: 20,\n    borderColor: \"#FF851B\"\n  },\n  buttonTextReset: {\n    color: \"#FF851B\"\n  },\n  button: {\n    borderWidth: 10,\n    borderColor: '#B9AAFF',\n    width: screen.width / 2,\n    height: screen.width / 2,\n    borderRadius: screen.width / 2,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/prajjwaldangal/summer2020/safePaths/safe-paths-mental-health-screen/screens/TabTwoScreen.tsx"],"names":["React","useState","useEffect","Text","View","screen","Dimensions","get","formatNumber","number","slice","getRemaining","time","mins","Math","floor","secs","App","remainingSecs","setRemainingSecs","isActive","setIsActive","toggle","console","log","reset","interval","setInterval","clearInterval","styles","container","timerText","button","buttonText","buttonReset","buttonTextReset","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","buttonTimer","flexDirection","title","fontSize","fontWeight","separator","marginVertical","height","width","color","marginBottom","marginTop","borderColor","borderWidth","borderRadius"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {useState, useEffect} from 'react';\nimport { StyleSheet , TouchableOpacity, Dimensions, StatusBar} from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\nconst screen = Dimensions.get('window');\n\nconst formatNumber = number => `0${number}`.slice(-2);\nconst getRemaining = (time) => {\n    const mins = Math.floor(time / 60);\n    const secs = time - mins * 60;\n    return { mins: formatNumber(mins), secs: formatNumber(secs) };\n}\nexport default function App() {\n  const [remainingSecs, setRemainingSecs] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n  const { mins, secs } = getRemaining(remainingSecs);\n\n  // var toggle;\n  var toggle = () => {\n    console.log(remainingSecs);\n\n    setIsActive(!isActive);\n  }\n\n  var reset = () => {\n    setRemainingSecs(0);\n    setIsActive(false);\n  }\n\n  useEffect(() => {\n    let interval = null;\n    if (isActive) {\n      interval = setInterval(() => {\n        setRemainingSecs(remainingSecs => remainingSecs + 1);\n      }, 1000);\n    } else if (!isActive && remainingSecs !== 0) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isActive, remainingSecs]);\n\n  return (\n    <View style={styles.container}>\n      <StatusBar barStyle=\"light-content\" />\n      <Text style={styles.timerText}>{`${mins}:${secs}`}</Text>\n      <TouchableOpacity onPress={toggle} style={styles.button}>\n          <Text style={styles.buttonText}>{isActive ? 'Pause' : 'Start'}</Text>\n      </TouchableOpacity>\n      <TouchableOpacity onPress={reset} style={[styles.button, styles.buttonReset]}>\n          <Text style={[styles.buttonText, styles.buttonTextReset]}>Reset</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#07121B',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  buttonTimer: {\n    flex: 1, flexDirection: 'row'\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  buttonText: {\n      fontSize: 45,\n      color: '#B9AAFF'\n  },\n  timerText: {\n      color: '#fff',\n      fontSize: 90,\n      marginBottom: 20\n  },\n  buttonReset: {\n      marginTop: 20,\n      borderColor: \"#FF851B\"\n  },\n  buttonTextReset: {\n    color: \"#FF851B\"\n  },\n  button: {\n      borderWidth: 10,\n      borderColor: '#B9AAFF',\n      width: screen.width / 2,\n      height: screen.width / 2,\n      borderRadius: screen.width / 2,\n      alignItems: 'center',\n      justifyContent: 'center'\n  }\n});\n"]},"metadata":{},"sourceType":"module"}